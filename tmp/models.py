# generated by datamodel-codegen:
#   filename:  https://api.bitbucket.org/swagger.json
#   timestamp: 2022-10-07T08:33:12+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Extra, Field, confloat, conint, constr


class Model(BaseModel):
    __root__: Any


class SearchSegment(BaseModel):
    text: Optional[str] = None
    match: Optional[bool] = None


class PipelineCacheContentUri(BaseModel):
    uri: Optional[AnyUrl] = Field(
        None, description='The uri for pipeline cache content.'
    )


class RefType(Enum):
    branch = 'branch'
    tag = 'tag'
    named_branch = 'named_branch'
    bookmark = 'bookmark'


class Type(Enum):
    branches = 'branches'
    tags = 'tags'
    bookmarks = 'bookmarks'
    default = 'default'
    custom = 'custom'


class Name(Enum):
    PENDING = 'PENDING'


class Name1(Enum):
    IN_PROGRESS = 'IN_PROGRESS'


class Name2(Enum):
    RUNNING = 'RUNNING'


class Name3(Enum):
    PAUSED = 'PAUSED'


class Name4(Enum):
    COMPLETED = 'COMPLETED'


class Name5(Enum):
    ERROR = 'ERROR'


class Name6(Enum):
    FAILED = 'FAILED'


class Name7(Enum):
    STOPPED = 'STOPPED'


class Name8(Enum):
    EXPIRED = 'EXPIRED'


class Name9(Enum):
    SUCCESSFUL = 'SUCCESSFUL'


class Name10(Enum):
    PENDING = 'PENDING'


class Name11(Enum):
    READY = 'READY'


class Name12(Enum):
    IN_PROGRESS = 'IN_PROGRESS'


class Name13(Enum):
    COMPLETED = 'COMPLETED'


class Name14(Enum):
    ERROR = 'ERROR'


class Name15(Enum):
    FAILED = 'FAILED'


class Name16(Enum):
    STOPPED = 'STOPPED'


class Name17(Enum):
    NOT_RUN = 'NOT_RUN'


class Name18(Enum):
    EXPIRED = 'EXPIRED'


class Name19(Enum):
    SUCCESSFUL = 'SUCCESSFUL'


class PipelineImage(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the image. If the image is hosted on DockerHub the short name can be used, otherwise the fully qualified name is required here.',
    )
    username: Optional[str] = Field(
        None,
        description='The username needed to authenticate with the Docker registry. Only required when using a private Docker image.',
    )
    password: Optional[str] = Field(
        None,
        description='The password needed to authenticate with the Docker registry. Only required when using a private Docker image.',
    )
    email: Optional[str] = Field(
        None,
        description='The email needed to authenticate with the Docker registry. Only required when using a private Docker image.',
    )


class PipelineCommand(BaseModel):
    name: Optional[str] = Field(None, description='The name of the command.')
    command: Optional[str] = Field(None, description='The executable command.')


class ReportType(Enum):
    SECURITY = 'SECURITY'
    COVERAGE = 'COVERAGE'
    TEST = 'TEST'
    BUG = 'BUG'


class Result(Enum):
    PASSED = 'PASSED'
    FAILED = 'FAILED'
    PENDING = 'PENDING'


class Type1(Enum):
    BOOLEAN = 'BOOLEAN'
    DATE = 'DATE'
    DURATION = 'DURATION'
    LINK = 'LINK'
    NUMBER = 'NUMBER'
    PERCENTAGE = 'PERCENTAGE'
    TEXT = 'TEXT'


class ReportData(BaseModel):
    type: Optional[Type1] = Field(
        None,
        description='The type of data contained in the value field. If not provided, then the value will be detected as a boolean, number or string.',
    )
    title: Optional[str] = Field(
        None, description='A string describing what this data field represents.'
    )
    value: Optional[Dict[str, Any]] = Field(
        None, description='The value of the data element.'
    )


class AnnotationType(Enum):
    VULNERABILITY = 'VULNERABILITY'
    CODE_SMELL = 'CODE_SMELL'
    BUG = 'BUG'


class Result1(Enum):
    PASSED = 'PASSED'
    FAILED = 'FAILED'
    SKIPPED = 'SKIPPED'
    IGNORED = 'IGNORED'


class Severity(Enum):
    CRITICAL = 'CRITICAL'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'


class _Attribute(Enum):
    public = 'public'
    read_only = 'read_only'


class ApplicationProperty(BaseModel):
    class Config:
        extra = Extra.allow

    _attributes: Optional[List[_Attribute]] = None


class Name20(Enum):
    UNDEPLOYED = 'UNDEPLOYED'


class Name21(Enum):
    IN_PROGRESS = 'IN_PROGRESS'


class Name22(Enum):
    COMPLETED = 'COMPLETED'


class Name23(Enum):
    SUCCESSFUL = 'SUCCESSFUL'


class Name24(Enum):
    FAILED = 'FAILED'


class Name25(Enum):
    STOPPED = 'STOPPED'


class Object(BaseModel):
    class Config:
        extra = Extra.allow

    type: str


class Markup(Enum):
    markdown = 'markdown'
    creole = 'creole'
    plaintext = 'plaintext'


class Summary(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')
    markup: Optional[Markup] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )


class Self(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Issue(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    issue: Optional[Issue] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Assignee(BaseModel):
    class Config:
        extra = Extra.forbid

    old: Optional[str] = None
    new: Optional[str] = None


class State(BaseModel):
    class Config:
        extra = Extra.forbid

    old: Optional[str] = None
    new: Optional[str] = None


class Title(BaseModel):
    class Config:
        extra = Extra.forbid

    old: Optional[str] = None
    new: Optional[str] = None


class Kind(BaseModel):
    class Config:
        extra = Extra.forbid

    old: Optional[str] = None
    new: Optional[str] = None


class Milestone(BaseModel):
    class Config:
        extra = Extra.forbid

    old: Optional[str] = None
    new: Optional[str] = None


class Component(BaseModel):
    class Config:
        extra = Extra.forbid

    old: Optional[str] = None
    new: Optional[str] = None


class Priority(BaseModel):
    class Config:
        extra = Extra.forbid

    old: Optional[str] = None
    new: Optional[str] = None


class Version(BaseModel):
    class Config:
        extra = Extra.forbid

    old: Optional[str] = None
    new: Optional[str] = None


class Content(BaseModel):
    class Config:
        extra = Extra.forbid

    old: Optional[str] = None
    new: Optional[str] = None


class Changes(BaseModel):
    class Config:
        extra = Extra.forbid

    assignee: Optional[Assignee] = None
    state: Optional[State] = None
    title: Optional[Title] = None
    kind: Optional[Kind] = None
    milestone: Optional[Milestone] = None
    component: Optional[Component] = None
    priority: Optional[Priority] = None
    version: Optional[Version] = None
    content: Optional[Content] = None


class Markup1(Enum):
    markdown = 'markdown'
    creole = 'creole'
    plaintext = 'plaintext'


class Message(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')
    markup: Optional[Markup1] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )


class Self1(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links1(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Link(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class AccountLinks(BaseModel):
    class Config:
        extra = Extra.allow

    avatar: Optional[Link] = None


class UserLinks(AccountLinks):
    self: Optional[Link] = None
    html: Optional[Link] = None
    repositories: Optional[Link] = None


class Account(Object):
    links: Optional[AccountLinks] = None
    created_on: Optional[datetime] = None
    display_name: Optional[str] = None
    username: Optional[constr(regex=r'^[a-zA-Z0-9_\-]+$')] = None
    uuid: Optional[str] = None


class User(Account):
    links: Optional[UserLinks] = None
    account_id: Optional[str] = Field(
        None, description="The user's Atlassian account ID."
    )
    account_status: Optional[str] = Field(
        None,
        description='The status of the account. Currently the only possible value is "active", but more values may be added in the future.',
    )
    has_2fa_enabled: Optional[bool] = None
    nickname: Optional[str] = Field(
        None,
        description='Account name defined by the owner. Should be used instead of the "username" field. Note that "nickname" cannot be used in place of "username" in URLs and queries, as "nickname" is not guaranteed to be unique.',
    )
    is_staff: Optional[bool] = None
    website: Optional[str] = None


class Events(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Repository1(BaseModel):
    class Config:
        extra = Extra.forbid

    events: Optional[Events] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Events1(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Workspace(BaseModel):
    class Config:
        extra = Extra.forbid

    events: Optional[Events1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class SubjectTypes(BaseModel):
    class Config:
        extra = Extra.forbid

    repository: Optional[Repository1] = None
    workspace: Optional[Workspace] = None


class Self2(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links2(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self2] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Kind1(Enum):
    feature = 'feature'
    bugfix = 'bugfix'
    release = 'release'
    hotfix = 'hotfix'


class BranchType(BaseModel):
    class Config:
        extra = Extra.forbid

    enabled: Optional[bool] = Field(
        None,
        description='Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.',
    )
    kind: Kind1 = Field(..., description='The kind of the branch type.')
    prefix: Optional[str] = Field(
        None,
        description='The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The `prefix` of an enabled branch type must be a valid branch prefix.Additionally, it cannot be blank, empty or `null`. The `prefix` for a disabled branch type can be empty or invalid.',
    )


class Development(BaseModel):
    class Config:
        extra = Extra.forbid

    is_valid: Optional[bool] = Field(
        None,
        description='Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.',
    )
    name: Optional[str] = Field(
        None,
        description='The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.',
    )
    use_mainbranch: Optional[bool] = Field(
        None,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.',
    )


class Production(BaseModel):
    class Config:
        extra = Extra.forbid

    is_valid: Optional[bool] = Field(
        None,
        description='Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.',
    )
    name: Optional[str] = Field(
        None,
        description='The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.',
    )
    use_mainbranch: Optional[bool] = Field(
        None,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.',
    )
    enabled: Optional[bool] = Field(
        None, description='Indicates if branch is enabled or not.'
    )


class BranchingModelSettings(Object):
    links: Optional[Links2] = None
    branch_types: Optional[List[BranchType]] = Field(
        None, max_items=4, min_items=0, unique_items=True
    )
    development: Optional[Development] = None
    production: Optional[Production] = None


class Kind2(Enum):
    feature = 'feature'
    bugfix = 'bugfix'
    release = 'release'
    hotfix = 'hotfix'


class BranchType1(BaseModel):
    class Config:
        extra = Extra.forbid

    kind: Kind2 = Field(..., description='The kind of branch.')
    prefix: str = Field(
        ...,
        description='The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.',
    )


class Development1(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str = Field(
        ...,
        description='Name of the target branch. If inherited by a repository, it will default to the main branch if the specified branch does not exist.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class Production1(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str = Field(
        ...,
        description='Name of the target branch. If inherited by a repository, it will default to the main branch if the specified branch does not exist.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class ProjectBranchingModel(Object):
    branch_types: Optional[List[BranchType1]] = Field(
        None,
        description='The active branch types.',
        max_items=4,
        min_items=0,
        unique_items=True,
    )
    development: Optional[Development1] = None
    production: Optional[Production1] = None


class AppUser(Account):
    account_id: Optional[str] = Field(
        None, description="The user's Atlassian account ID."
    )
    account_status: Optional[str] = Field(
        None,
        description='The status of the account. Currently the only possible value is "active", but more values may be added in the future.',
    )
    kind: Optional[str] = Field(None, description='The kind of App User.')


class Self3(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links3(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self3] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Page(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class Self4(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links4(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self4] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Permission(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'
    none = 'none'


class MergeStrategy(Enum):
    merge_commit = 'merge_commit'
    squash = 'squash'
    fast_forward = 'fast_forward'


class Branch1(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = None
    merge_strategies: Optional[List[MergeStrategy]] = Field(
        None,
        description='Available merge strategies, when this endpoint is the destination of the pull request.',
    )
    default_merge_strategy: Optional[str] = Field(
        None,
        description='The default merge strategy, when this endpoint is the destination of the pull request.',
    )


class Commit1(BaseModel):
    class Config:
        extra = Extra.forbid

    hash: Optional[constr(regex=r'[0-9a-f]{7,}?')] = None


class Self5(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html1(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Commits(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Approve(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Diff(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Diffstat(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Comments(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Activity(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Merge(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Decline(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links5(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self5] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    commits: Optional[Commits] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    approve: Optional[Approve] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    diff: Optional[Diff] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    diffstat: Optional[Diffstat] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    comments: Optional[Comments] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    activity: Optional[Activity] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    merge: Optional[Merge] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    decline: Optional[Decline] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Markup2(Enum):
    markdown = 'markdown'
    creole = 'creole'
    plaintext = 'plaintext'


class Title1(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')
    markup: Optional[Markup2] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )


class Markup3(Enum):
    markdown = 'markdown'
    creole = 'creole'
    plaintext = 'plaintext'


class Description(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')
    markup: Optional[Markup3] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )


class Markup4(Enum):
    markdown = 'markdown'
    creole = 'creole'
    plaintext = 'plaintext'


class Reason(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')
    markup: Optional[Markup4] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )


class Rendered(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Optional[Title1] = None
    description: Optional[Description] = None
    reason: Optional[Reason] = None


class Markup5(Enum):
    markdown = 'markdown'
    creole = 'creole'
    plaintext = 'plaintext'


class Summary1(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')
    markup: Optional[Markup5] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )


class State1(Enum):
    OPEN = 'OPEN'
    MERGED = 'MERGED'
    DECLINED = 'DECLINED'
    SUPERSEDED = 'SUPERSEDED'


class MergeCommit(BaseModel):
    class Config:
        extra = Extra.forbid

    hash: Optional[constr(regex=r'[0-9a-f]{7,}?')] = None


class ExportOptions(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    project_key: Optional[str] = None
    project_name: Optional[str] = None
    send_email: Optional[bool] = None
    include_attachments: Optional[bool] = None


class Self6(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links6(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self6] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Milestone1(Object):
    links: Optional[Links6] = None
    name: Optional[str] = None
    id: Optional[int] = None


class SubjectType(Enum):
    repository = 'repository'
    workspace = 'workspace'


class Event(Enum):
    repo_push = 'repo:push'
    pullrequest_comment_deleted = 'pullrequest:comment_deleted'
    issue_updated = 'issue:updated'
    repo_imported = 'repo:imported'
    pullrequest_created = 'pullrequest:created'
    pullrequest_comment_created = 'pullrequest:comment_created'
    repo_commit_status_updated = 'repo:commit_status_updated'
    pullrequest_comment_updated = 'pullrequest:comment_updated'
    pullrequest_approved = 'pullrequest:approved'
    pullrequest_unapproved = 'pullrequest:unapproved'
    repo_transfer = 'repo:transfer'
    pullrequest_changes_request_removed = 'pullrequest:changes_request_removed'
    repo_created = 'repo:created'
    issue_comment_created = 'issue:comment_created'
    pullrequest_fulfilled = 'pullrequest:fulfilled'
    repo_fork = 'repo:fork'
    pullrequest_changes_request_created = 'pullrequest:changes_request_created'
    repo_updated = 'repo:updated'
    repo_commit_status_created = 'repo:commit_status_created'
    pullrequest_updated = 'pullrequest:updated'
    project_updated = 'project:updated'
    issue_created = 'issue:created'
    repo_deleted = 'repo:deleted'
    repo_commit_comment_created = 'repo:commit_comment_created'
    pullrequest_rejected = 'pullrequest:rejected'


class WebhookSubscription(Object):
    uuid: Optional[str] = Field(None, description="The webhook's id")
    url: Optional[AnyUrl] = Field(None, description='The URL events get delivered to.')
    description: Optional[str] = Field(
        None, description='A user-defined description of the webhook.'
    )
    subject_type: Optional[SubjectType] = Field(
        None,
        description='The type of entity. Set to either `repository` or `workspace` based on where the subscription is defined.',
    )
    subject: Optional[Object] = None
    active: Optional[bool] = None
    created_at: Optional[datetime] = None
    events: Optional[List[Event]] = Field(
        None,
        description='The events this webhook is subscribed to.',
        min_items=1,
        unique_items=True,
    )


class Avatar(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html2(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Members(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Owners(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Projects(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Repositories(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Snippets(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Self7(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links7(BaseModel):
    class Config:
        extra = Extra.forbid

    avatar: Optional[Avatar] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html2] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    members: Optional[Members] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    owners: Optional[Owners] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    projects: Optional[Projects] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    repositories: Optional[Repositories] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    snippets: Optional[Snippets] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    self: Optional[Self7] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class WorkspaceModel(Object):
    class Config:
        extra = Extra.forbid

    links: Optional[Links7] = None
    uuid: Optional[str] = Field(None, description="The workspace's immutable id.")
    name: Optional[str] = Field(None, description='The name of the workspace.')
    slug: Optional[str] = Field(
        None, description='The short label that identifies this workspace.'
    )
    is_private: Optional[bool] = Field(
        None,
        description='Indicates whether the workspace is publicly accessible, or whether it is\nprivate to the members and consequently only visible to members.',
    )
    created_on: Optional[datetime] = None
    updated_on: Optional[datetime] = None


class Role(Enum):
    PARTICIPANT = 'PARTICIPANT'
    REVIEWER = 'REVIEWER'


class State2Enum(Enum):
    approved = 'approved'
    changes_requested = 'changes_requested'


class State2(BaseModel):
    __root__: Optional[State2Enum] = None


class Participant(Object):
    user: Optional[Account] = None
    role: Optional[Role] = None
    approved: Optional[bool] = None
    state: Optional[State2] = None
    participated_on: Optional[datetime] = Field(
        None,
        description="The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.",
    )


class Self8(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links8(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self8] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class SshKey(Object):
    uuid: Optional[str] = Field(None, description="The SSH key's immutable ID.")
    key: Optional[str] = Field(
        None, description='The SSH public key value in OpenSSH format.'
    )
    comment: Optional[str] = Field(
        None, description='The comment parsed from the SSH key (if present)'
    )
    label: Optional[str] = Field(
        None, description='The user-defined label for the SSH key'
    )
    created_on: Optional[datetime] = None
    last_used: Optional[datetime] = None
    links: Optional[Links8] = None


class SshAccountKey(SshKey):
    owner: Optional[Account] = None


class Self9(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html3(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Diff1(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links9(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self9] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html3] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    diff: Optional[Diff1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Self10(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links10(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self10] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class IssueAttachment(Object):
    links: Optional[Links10] = None
    name: Optional[str] = None


class PaginatedIssueAttachments(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[IssueAttachment]] = Field(None, min_items=0)


class Permission1(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'
    none = 'none'


class Self11(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links11(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self11] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Self12(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Commits1(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html4(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links12(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self12] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    commits: Optional[Commits1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html4] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class TeamLinks(AccountLinks):
    self: Optional[Link] = None
    html: Optional[Link] = None
    members: Optional[Link] = None
    projects: Optional[Link] = None
    repositories: Optional[Link] = None


class Team(Account):
    links: Optional[TeamLinks] = None


class Html5(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Avatar1(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links13(BaseModel):
    class Config:
        extra = Extra.forbid

    html: Optional[Html5] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    avatar: Optional[Avatar1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Project(Object):
    links: Optional[Links13] = None
    uuid: Optional[str] = Field(None, description="The project's immutable id.")
    key: Optional[str] = Field(None, description="The project's key.")
    owner: Optional[Team] = None
    name: Optional[str] = Field(None, description='The name of the project.')
    description: Optional[str] = None
    is_private: Optional[bool] = Field(
        None,
        description='\nIndicates whether the project is publicly accessible, or whether it is\nprivate to the team and consequently only visible to team members.\nNote that private projects cannot contain public repositories.',
    )
    created_on: Optional[datetime] = None
    updated_on: Optional[datetime] = None
    has_publicly_visible_repos: Optional[bool] = Field(
        None,
        description='\nIndicates whether the project contains publicly visible repositories.\nNote that private projects cannot contain public repositories.',
    )


class MergeStrategy1(Enum):
    merge_commit = 'merge_commit'
    squash = 'squash'
    fast_forward = 'fast_forward'


class PullrequestMergeParameters(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    message: Optional[str] = Field(
        None,
        description='The commit message that will be used on the resulting commit.',
    )
    close_source_branch: Optional[bool] = Field(
        None,
        description='Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False',
    )
    merge_strategy: Optional[MergeStrategy1] = Field(
        'merge_commit',
        description='The merge strategy that will be used to merge the pull request.',
    )


class Kind3(Enum):
    feature = 'feature'
    bugfix = 'bugfix'
    release = 'release'
    hotfix = 'hotfix'


class BranchType2(BaseModel):
    class Config:
        extra = Extra.forbid

    kind: Kind3 = Field(..., description='The kind of branch.')
    prefix: str = Field(
        ...,
        description='The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.',
    )


class Self13(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html6(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Avatar2(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Pullrequests(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Commits2(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Forks(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Watchers(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Downloads(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class CloneItem(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Hooks(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links14(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self13] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html6] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    avatar: Optional[Avatar2] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    pullrequests: Optional[Pullrequests] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    commits: Optional[Commits2] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    forks: Optional[Forks] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    watchers: Optional[Watchers] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    downloads: Optional[Downloads] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    clone: Optional[List[CloneItem]] = None
    hooks: Optional[Hooks] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Scm(Enum):
    git = 'git'


class ForkPolicy(Enum):
    allow_forks = 'allow_forks'
    no_public_forks = 'no_public_forks'
    no_forks = 'no_forks'


class PaginatedWebhookSubscriptions(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[WebhookSubscription]] = Field(
        None, min_items=0, unique_items=True
    )


class PaginatedWorkspaces(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[WorkspaceModel]] = Field(None, min_items=0, unique_items=True)


class Attributes(Enum):
    link = 'link'
    executable = 'executable'
    subrepository = 'subrepository'
    binary = 'binary'
    lfs = 'lfs'


class Status(Enum):
    added = 'added'
    removed = 'removed'
    modified = 'modified'
    renamed = 'renamed'


class Status1(Enum):
    ACCEPTED = 'ACCEPTED'
    STARTED = 'STARTED'
    RUNNING = 'RUNNING'
    FAILURE = 'FAILURE'


class IssueJobStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[str] = None
    status: Optional[Status1] = Field(
        None, description='The status of the import/export job'
    )
    phase: Optional[str] = Field(None, description='The phase of the import/export job')
    total: Optional[int] = Field(
        None, description='The total number of issues being imported/exported'
    )
    count: Optional[int] = Field(
        None, description='The total number of issues already imported/exported'
    )
    pct: Optional[confloat(ge=0.0, le=100.0)] = Field(
        None, description='The percentage of issues already imported/exported'
    )


class Self14(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Commit2(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links15(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self14] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    commit: Optional[Commit2] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class State3(Enum):
    INPROGRESS = 'INPROGRESS'
    STOPPED = 'STOPPED'
    SUCCESSFUL = 'SUCCESSFUL'
    FAILED = 'FAILED'


class Commitstatus(Object):
    links: Optional[Links15] = None
    uuid: Optional[str] = Field(None, description="The commit status' id.")
    key: Optional[str] = Field(
        None,
        description='An identifier for the status that\'s unique to\n        its type (current "build" is the only supported type) and the vendor,\n        e.g. BB-DEPLOY',
    )
    refname: Optional[str] = Field(
        None,
        description='\nThe name of the ref that pointed to this commit at the time the status\nobject was created. Note that this the ref may since have moved off of\nthe commit. This optional field can be useful for build systems whose\nbuild triggers and configuration are branch-dependent (e.g. a Pipeline\nbuild).\nIt is legitimate for this field to not be set, or even apply (e.g. a\nstatic linting job).',
    )
    url: Optional[str] = Field(
        None,
        description='A URL linking back to the vendor or build system, for providing more information about whatever process produced this status. Accepts context variables `repository` and `commit` that Bitbucket will evaluate at runtime whenever at runtime. For example, one could use https://foo.com/builds/{repository.full_name} which Bitbucket will turn into https://foo.com/builds/foo/bar at render time.',
    )
    state: Optional[State3] = Field(
        None, description='Provides some indication of the status of this commit'
    )
    name: Optional[str] = Field(
        None, description='An identifier for the build itself, e.g. BB-DEPLOY-1'
    )
    description: Optional[str] = Field(
        None, description='A description of the build (e.g. "Unit tests in Bamboo")'
    )
    created_on: Optional[datetime] = None
    updated_on: Optional[datetime] = None


class PaginatedAccounts(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Account]] = Field(None, min_items=0, unique_items=True)


class PaginatedProjects(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Project]] = Field(None, min_items=0, unique_items=True)


class Event1(Enum):
    repo_push = 'repo:push'
    pullrequest_comment_deleted = 'pullrequest:comment_deleted'
    issue_updated = 'issue:updated'
    repo_imported = 'repo:imported'
    pullrequest_created = 'pullrequest:created'
    pullrequest_comment_created = 'pullrequest:comment_created'
    repo_commit_status_updated = 'repo:commit_status_updated'
    pullrequest_comment_updated = 'pullrequest:comment_updated'
    pullrequest_approved = 'pullrequest:approved'
    pullrequest_unapproved = 'pullrequest:unapproved'
    repo_transfer = 'repo:transfer'
    pullrequest_changes_request_removed = 'pullrequest:changes_request_removed'
    repo_created = 'repo:created'
    issue_comment_created = 'issue:comment_created'
    pullrequest_fulfilled = 'pullrequest:fulfilled'
    repo_fork = 'repo:fork'
    pullrequest_changes_request_created = 'pullrequest:changes_request_created'
    repo_updated = 'repo:updated'
    repo_commit_status_created = 'repo:commit_status_created'
    pullrequest_updated = 'pullrequest:updated'
    project_updated = 'project:updated'
    issue_created = 'issue:created'
    repo_deleted = 'repo:deleted'
    repo_commit_comment_created = 'repo:commit_comment_created'
    pullrequest_rejected = 'pullrequest:rejected'


class HookEvent(BaseModel):
    class Config:
        extra = Extra.forbid

    event: Optional[Event1] = Field(None, description='The event identifier.')
    category: Optional[str] = Field(
        None, description='The category this event belongs to.'
    )
    label: Optional[str] = Field(None, description='Summary of the webhook event type.')
    description: Optional[str] = Field(
        None, description='More detailed description of the webhook event type.'
    )


class PaginatedHookEvents(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[HookEvent]] = Field(None, min_items=0, unique_items=True)


class Markup6(Enum):
    markdown = 'markdown'
    creole = 'creole'
    plaintext = 'plaintext'


class Content1(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')
    markup: Optional[Markup6] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )


class Inline(BaseModel):
    class Config:
        extra = Extra.forbid

    from_: Optional[conint(ge=1)] = Field(
        None,
        alias='from',
        description="The comment's anchor line in the old version of the file.",
    )
    to: Optional[conint(ge=1)] = Field(
        None,
        description="The comment's anchor line in the new version of the file. If the 'from' line is also provided, this value will be removed.",
    )
    path: str = Field(
        ..., description='The path of the file this comment is anchored to.'
    )


class Self15(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html7(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Code(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links16(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self15] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html7] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    code: Optional[Code] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class Comment(Object):
    id: Optional[int] = None
    created_on: Optional[datetime] = None
    updated_on: Optional[datetime] = None
    content: Optional[Content1] = None
    user: Optional[Account] = None
    deleted: Optional[bool] = None
    parent: Optional[Comment] = None
    inline: Optional[Inline] = None
    links: Optional[Links16] = None


class Error1(BaseModel):
    class Config:
        extra = Extra.forbid

    message: str
    detail: Optional[str] = None
    data: Optional[Dict[str, Any]] = Field(
        None, description='Optional structured data that is endpoint-specific.'
    )


class Error(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    error: Optional[Error1] = None


class Kind4(Enum):
    feature = 'feature'
    bugfix = 'bugfix'
    release = 'release'
    hotfix = 'hotfix'


class BranchType3(BaseModel):
    class Config:
        extra = Extra.forbid

    kind: Kind4 = Field(..., description='The kind of branch.')
    prefix: str = Field(
        ...,
        description='The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.',
    )


class Self16(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links17(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self16] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class ProjectDeployKey(Object):
    key: Optional[str] = Field(None, description='The deploy key value.')
    project: Optional[Project] = None
    comment: Optional[str] = Field(
        None, description='The comment parsed from the deploy key (if present)'
    )
    label: Optional[str] = Field(
        None, description='The user-defined label for the deploy key'
    )
    added_on: Optional[datetime] = None
    last_used: Optional[datetime] = None
    links: Optional[Links17] = None
    created_by: Optional[Account] = None


class PaginatedSshUserKeys(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[SshAccountKey]] = Field(None, min_items=0, unique_items=True)


class Scm1(Enum):
    git = 'git'


class Snippet(Object):
    id: Optional[conint(ge=0)] = None
    title: Optional[str] = None
    scm: Optional[Scm1] = Field(None, description='The DVCS used to store the snippet.')
    created_on: Optional[datetime] = None
    updated_on: Optional[datetime] = None
    owner: Optional[Account] = None
    creator: Optional[Account] = None
    is_private: Optional[bool] = None


class Self17(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links18(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self17] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class VersionModel(Object):
    class Config:
        extra = Extra.forbid

    links: Optional[Links18] = None
    name: Optional[str] = None
    id: Optional[int] = None


class RepositoryInheritanceState(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    override_settings: Optional[Dict[str, Any]] = None


class MergeStrategy2(Enum):
    merge_commit = 'merge_commit'
    squash = 'squash'
    fast_forward = 'fast_forward'


class PaginatedMilestones(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Milestone1]] = Field(None, min_items=0, unique_items=True)


class DefaultReviewerAndType(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    reviewer_type: Optional[str] = None
    user: Optional[User] = None


class PaginatedDefaultReviewerAndType(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[DefaultReviewerAndType]] = Field(
        None, min_items=0, unique_items=True
    )


class PaginatedProjectDeployKeys(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[ProjectDeployKey]] = Field(
        None, min_items=0, unique_items=True
    )


class Self18(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html8(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links19(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self18] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html8] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class SnippetComment(Object):
    links: Optional[Links19] = None
    snippet: Optional[Snippet] = None


class Self19(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links20(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self19] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class WorkspaceMembership(Object):
    links: Optional[Links20] = None
    user: Optional[Account] = None
    workspace: Optional[WorkspaceModel] = None


class Self20(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Html9(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Comments1(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Attachments(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Watch(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Vote(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links21(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self20] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    html: Optional[Html9] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    comments: Optional[Comments1] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    attachments: Optional[Attachments] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    watch: Optional[Watch] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )
    vote: Optional[Vote] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class State4(Enum):
    new = 'new'
    open = 'open'
    resolved = 'resolved'
    on_hold = 'on hold'
    invalid = 'invalid'
    duplicate = 'duplicate'
    wontfix = 'wontfix'
    closed = 'closed'


class Kind5(Enum):
    bug = 'bug'
    enhancement = 'enhancement'
    proposal = 'proposal'
    task = 'task'


class Priority1(Enum):
    trivial = 'trivial'
    minor = 'minor'
    major = 'major'
    critical = 'critical'
    blocker = 'blocker'


class Markup7(Enum):
    markdown = 'markdown'
    creole = 'creole'
    plaintext = 'plaintext'


class Content2(BaseModel):
    class Config:
        extra = Extra.forbid

    raw: Optional[str] = Field(None, description='The text as it was typed by a user.')
    markup: Optional[Markup7] = Field(
        None,
        description='The type of markup language the raw content is to be interpreted in.',
    )
    html: Optional[str] = Field(
        None, description="The user's content rendered as HTML."
    )


class PaginatedSnippets(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Snippet]] = Field(None, min_items=0, unique_items=True)


class Self21(BaseModel):
    class Config:
        extra = Extra.forbid

    href: Optional[AnyUrl] = None
    name: Optional[str] = None


class Links22(BaseModel):
    class Config:
        extra = Extra.forbid

    self: Optional[Self21] = Field(
        None, description='A link to a resource related to this object.', title='Link'
    )


class ComponentModel(Object):
    class Config:
        extra = Extra.forbid

    links: Optional[Links22] = None
    name: Optional[str] = None
    id: Optional[int] = None


class PaginatedCommitstatuses(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Commitstatus]] = Field(None, min_items=0, unique_items=True)


class Permission2(Enum):
    read = 'read'
    write = 'write'
    admin = 'admin'
    none = 'none'


class JiraSite(Object):
    pass


class JiraProject(Object):
    pass


class PipelinesStgWestPipelineStep(Object):
    pass


class SearchLine(BaseModel):
    line: Optional[int] = None
    segments: Optional[List[SearchSegment]] = None


class PipelineCache(Object):
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the pipeline cache.'
    )
    pipeline_uuid: Optional[str] = Field(
        None, description='The UUID of the pipeline that created the cache.'
    )
    step_uuid: Optional[str] = Field(
        None, description='The uuid of the step that created the cache.'
    )
    name: Optional[str] = Field(None, description='The name of the cache.')
    path: Optional[str] = Field(
        None, description='The path where the cache contents were retrieved from.'
    )
    file_size_bytes: Optional[int] = Field(
        None, description='The size of the file containing the archive of the cache.'
    )
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the cache was created.'
    )


class PaginatedPipelineCaches(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[PipelineCache]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class PipelineTarget(Object):
    pass


class PipelineSelector(Object):
    type: Optional[Type] = Field(None, description='The type of selector.')
    pattern: Optional[str] = Field(
        None, description='The name of the matching pipeline definition.'
    )


class PipelineTrigger(Object):
    pass


class PipelineTriggerPush(PipelineTrigger):
    pass


class PipelineTriggerManual(PipelineTrigger):
    pass


class PipelineState(Object):
    pass


class PipelineStatePending(PipelineState):
    name: Optional[Name] = Field(
        None, description='The name of pipeline state (PENDING).'
    )


class PipelineStateInProgressStage(Object):
    pass


class PipelineStateInProgressRunning(PipelineStateInProgressStage):
    name: Optional[Name2] = Field(None, description='The name of the stage (RUNNING)')


class PipelineStateInProgressPaused(PipelineStateInProgressStage):
    name: Optional[Name3] = Field(None, description='The name of the stage (PAUSED)')


class PipelineStateCompletedResult(Object):
    pass


class PipelineStateCompletedFailed(PipelineStateCompletedResult):
    name: Optional[Name6] = Field(
        None, description='The name of the failed result (FAILED).'
    )


class PipelineStateCompletedStopped(PipelineStateCompletedResult):
    name: Optional[Name7] = Field(
        None, description='The name of the stopped result (STOPPED).'
    )


class PipelineStateCompletedExpired(PipelineStateCompletedResult):
    name: Optional[Name8] = Field(
        None, description='The name of the stopped result (EXPIRED).'
    )


class PipelineStateCompletedSuccessful(PipelineStateCompletedResult):
    name: Optional[Name9] = Field(
        None, description='The name of the successful result (SUCCESSFUL).'
    )


class PipelineError(Object):
    key: Optional[str] = Field(None, description='The error key.')
    message: Optional[str] = Field(None, description='The error message.')


class PipelineSshPublicKey(Object):
    key_type: Optional[str] = Field(None, description='The type of the public key.')
    key: Optional[str] = Field(None, description='The base64 encoded public key.')
    md5_fingerprint: Optional[str] = Field(
        None, description='The MD5 fingerprint of the public key.'
    )
    sha256_fingerprint: Optional[str] = Field(
        None, description='The SHA-256 fingerprint of the public key.'
    )


class PipelineKnownHost(Object):
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the known host.'
    )
    hostname: Optional[str] = Field(None, description='The hostname of the known host.')
    public_key: Optional[PipelineSshPublicKey] = Field(
        None, description='The public key of the known host.'
    )


class PipelineSshKeyPair(Object):
    private_key: Optional[str] = Field(
        None,
        description='The SSH private key. This value will be empty when retrieving the SSH key pair.',
    )
    public_key: Optional[str] = Field(None, description='The SSH public key.')


class PipelineSchedule(Object):
    uuid: Optional[str] = Field(None, description='The UUID identifying the schedule.')
    enabled: Optional[bool] = Field(
        None, description='Whether the schedule is enabled.'
    )
    target: Optional[PipelineTarget] = Field(
        None, description='The target on which the schedule will be executed.'
    )
    selector: Optional[PipelineSelector] = None
    cron_pattern: Optional[str] = Field(
        None, description='The cron expression that the schedule applies.'
    )
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the schedule was created.'
    )
    updated_on: Optional[datetime] = Field(
        None, description='The timestamp when the schedule was updated.'
    )


class PaginatedPipelineSchedules(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[PipelineSchedule]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class PipelineScheduleExecution(Object):
    pass


class PipelineScheduleExecutionErrored(PipelineScheduleExecution):
    error: Optional[PipelineError] = Field(
        None, description='The error that caused the execution to fail.'
    )


class PaginatedPipelineScheduleExecutions(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[PipelineScheduleExecution]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class PipelineBuildNumber(Object):
    next: Optional[int] = Field(
        None, description='The next number that will be used as build number.'
    )


class PipelineVariable(Object):
    uuid: Optional[str] = Field(None, description='The UUID identifying the variable.')
    key: Optional[str] = Field(None, description='The unique name of the variable.')
    value: Optional[str] = Field(
        None,
        description='The value of the variable. If the variable is secured, this will be empty.',
    )
    secured: Optional[bool] = Field(
        None,
        description='If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.',
    )


class PipelineStepState(Object):
    pass


class PipelineStepStatePending(PipelineStepState):
    name: Optional[Name10] = Field(
        None, description='The name of pipeline step state (PENDING).'
    )


class PipelineStepStateReady(PipelineStepState):
    name: Optional[Name11] = Field(
        None, description='The name of pipeline step state (READY).'
    )


class PipelineStepStateInProgress(PipelineStepState):
    name: Optional[Name12] = Field(
        None, description='The name of pipeline step state (IN_PROGRESS).'
    )


class PipelineStepStateCompletedResult(Object):
    pass


class PipelineStepStateCompletedFailed(PipelineStepStateCompletedResult):
    name: Optional[Name15] = Field(None, description='The name of the result (FAILED)')


class PipelineStepStateCompletedStopped(PipelineStepStateCompletedResult):
    name: Optional[Name16] = Field(None, description='The name of the result (STOPPED)')


class PipelineStepStateCompletedNotRun(PipelineStepStateCompletedResult):
    name: Optional[Name17] = Field(None, description='The name of the result (NOT_RUN)')


class PipelineStepStateCompletedExpired(PipelineStepStateCompletedResult):
    name: Optional[Name18] = Field(None, description='The name of the result (EXPIRED)')


class PipelineStepStateCompletedSuccessful(PipelineStepStateCompletedResult):
    name: Optional[Name19] = Field(
        None, description='The name of the result (SUCCESSFUL)'
    )


class PipelineStepError(Object):
    key: Optional[str] = Field(None, description='The error key.')
    message: Optional[str] = Field(None, description='The error message.')


class PaginatedPipelineKnownHosts(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[PipelineKnownHost]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class PaginatedPipelineVariables(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[PipelineVariable]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class DdevReport(Object):
    pass


class StgWestReport(Object):
    pass


class Report(Object):
    uuid: Optional[str] = Field(
        None, description='The UUID that can be used to identify the report.'
    )
    title: Optional[str] = Field(None, description='The title of the report.')
    details: Optional[str] = Field(
        None, description='A string to describe the purpose of the report.'
    )
    external_id: Optional[str] = Field(
        None,
        description="ID of the report provided by the report creator. It can be used to identify the report as an alternative to it's generated uuid. It is not used by Bitbucket, but only by the report creator for updating or deleting this specific report. Needs to be unique.",
    )
    reporter: Optional[str] = Field(
        None,
        description='A string to describe the tool or company who created the report.',
    )
    link: Optional[AnyUrl] = Field(
        None,
        description='A URL linking to the results of the report in an external tool.',
    )
    remote_link_enabled: Optional[bool] = Field(
        None,
        description='If enabled, a remote link is created in Jira for the issue associated with the commit the report belongs to.',
    )
    logo_url: Optional[AnyUrl] = Field(
        None,
        description='A URL to the report logo. If none is provided, the default insights logo will be used.',
    )
    report_type: Optional[ReportType] = Field(
        None, description='The type of the report.'
    )
    result: Optional[Result] = Field(
        None,
        description='The state of the report. May be set to PENDING and later updated.',
    )
    data: Optional[List[ReportData]] = Field(
        None,
        description='An array of data fields to display information on the report. Maximum 10.',
    )
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the report was created.'
    )
    updated_on: Optional[datetime] = Field(
        None, description='The timestamp when the report was updated.'
    )


class ReportAnnotation(Object):
    external_id: Optional[str] = Field(
        None,
        description="ID of the annotation provided by the annotation creator. It can be used to identify the annotation as an alternative to it's generated uuid. It is not used by Bitbucket, but only by the annotation creator for updating or deleting this specific annotation. Needs to be unique.",
    )
    uuid: Optional[str] = Field(
        None, description='The UUID that can be used to identify the annotation.'
    )
    annotation_type: Optional[AnnotationType] = Field(
        None, description='The type of the report.'
    )
    path: Optional[str] = Field(
        None,
        description='The path of the file on which this annotation should be placed. This is the path of the file relative to the git repository. If no path is provided, then it will appear in the overview modal on all pull requests where the tip of the branch is the given commit, regardless of which files were modified.',
    )
    line: Optional[conint(ge=1)] = Field(
        None,
        description='The line number that the annotation should belong to. If no line number is provided, then it will default to 0 and in a pull request it will appear at the top of the file specified by the path field.',
    )
    summary: Optional[str] = Field(None, description='The message to display to users.')
    details: Optional[str] = Field(
        None,
        description='The details to show to users when clicking on the annotation.',
    )
    result: Optional[Result1] = Field(
        None,
        description='The state of the report. May be set to PENDING and later updated.',
    )
    severity: Optional[Severity] = Field(
        None, description='The severity of the annotation.'
    )
    link: Optional[AnyUrl] = Field(
        None, description='A URL linking to the annotation in an external tool.'
    )
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the report was created.'
    )
    updated_on: Optional[datetime] = Field(
        None, description='The timestamp when the report was updated.'
    )


class PaginatedReports(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[Report]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class PaginatedAnnotations(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[ReportAnnotation]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class DeploymentsStgWestDeploymentEnvironment(Object):
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )
    name: Optional[str] = Field(None, description='The name of the environment.')


class DeploymentsStgWestPaginatedEnvironments(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[DeploymentsStgWestDeploymentEnvironment]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class DeploymentsStgWestDeploymentEnvironmentLock(Object):
    environmentUuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )


class DeploymentEnvironment(Object):
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )
    name: Optional[str] = Field(None, description='The name of the environment.')


class PaginatedEnvironments(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[DeploymentEnvironment]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class DeploymentEnvironmentLock(Object):
    environmentUuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )


class DeploymentState(Object):
    pass


class DeploymentStateUndeployed(DeploymentState):
    name: Optional[Name20] = Field(
        None, description='The name of deployment state (UNDEPLOYED).'
    )
    trigger_url: Optional[AnyUrl] = Field(
        None, description='Link to trigger the deployment.'
    )


class DeploymentStateInProgress(DeploymentState):
    name: Optional[Name21] = Field(
        None, description='The name of deployment state (IN_PROGRESS).'
    )
    url: Optional[AnyUrl] = Field(None, description='Link to the deployment result.')
    deployer: Optional[Account] = Field(
        None,
        description='The Bitbucket account that was used to perform the deployment.',
    )
    start_date: Optional[datetime] = Field(
        None, description='The timestamp when the deployment was started.'
    )


class DeploymentStateCompletedStatus(Object):
    pass


class DeploymentStateCompletedStatusSuccessful(DeploymentStateCompletedStatus):
    name: Optional[Name23] = Field(
        None, description='The name of the completed deployment status (SUCCESSFUL).'
    )


class DeploymentStateCompletedStatusFailed(DeploymentStateCompletedStatus):
    name: Optional[Name24] = Field(
        None, description='The name of the completed deployment status (FAILED).'
    )


class DeploymentStateCompletedStatusStopped(DeploymentStateCompletedStatus):
    name: Optional[Name25] = Field(
        None, description='The name of the completed deployment status (STOPPED).'
    )


class DeploymentVariable(Object):
    uuid: Optional[str] = Field(None, description='The UUID identifying the variable.')
    key: Optional[str] = Field(None, description='The unique name of the variable.')
    value: Optional[str] = Field(
        None,
        description='The value of the variable. If the variable is secured, this will be empty.',
    )
    secured: Optional[bool] = Field(
        None,
        description='If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.',
    )


class PaginatedDeploymentVariable(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[DeploymentVariable]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class DeploymentsDdevDeploymentEnvironment(Object):
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )
    name: Optional[str] = Field(None, description='The name of the environment.')


class DeploymentsDdevPaginatedEnvironments(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[DeploymentsDdevDeploymentEnvironment]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class DeploymentsDdevDeploymentEnvironmentLock(Object):
    environmentUuid: Optional[str] = Field(
        None, description='The UUID identifying the environment.'
    )


class PipelinesDdevPipelineStep(Object):
    pass


class Author(Object):
    raw: Optional[str] = Field(
        None,
        description='The raw author value from the repository. This may be the only value available if the author does not match a user in Bitbucket.',
    )
    user: Optional[Account] = None


class BaseCommit(Object):
    hash: Optional[constr(regex=r'[0-9a-f]{7,}?')] = None
    date: Optional[datetime] = None
    author: Optional[Author] = None
    message: Optional[str] = None
    summary: Optional[Summary] = None
    parents: Optional[List[BaseCommit]] = None


class Group(Object):
    links: Optional[Links3] = None
    owner: Optional[Account] = None
    workspace: Optional[WorkspaceModel] = None
    name: Optional[str] = None
    slug: Optional[str] = Field(
        None,
        description='The "sluggified" version of the group\'s name. This contains only ASCII\ncharacters and can therefore be slightly different than the name',
    )
    full_slug: Optional[str] = Field(
        None,
        description="The concatenation of the workspace's slug and the group's slug,\nseparated with a colon (e.g. `acme:developers`)\n",
    )


class Branchrestriction(Object):
    users: Optional[List[Account]] = Field(None, min_items=0)
    groups: Optional[List[Group]] = Field(None, min_items=0)


class PaginatedSnippetComments(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[SnippetComment]] = Field(None, min_items=0, unique_items=True)


class PaginatedWorkspaceMemberships(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[WorkspaceMembership]] = Field(
        None, min_items=0, unique_items=True
    )


class PaginatedChangeset(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[BaseCommit]] = Field(None, min_items=0, unique_items=True)


class SnippetCommit(BaseCommit):
    links: Optional[Links9] = None
    snippet: Optional[Snippet] = None


class PaginatedBranchrestrictions(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Branchrestriction]] = Field(
        None, min_items=0, unique_items=True
    )


class PaginatedVersions(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[VersionModel]] = Field(None, min_items=0, unique_items=True)


class PaginatedSnippetCommit(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[SnippetCommit]] = Field(None, min_items=0)


class PaginatedComponents(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[ComponentModel]] = Field(None, min_items=0, unique_items=True)


class SearchContentMatch(BaseModel):
    lines: Optional[List[SearchLine]] = None


class PipelineStateInProgress(PipelineState):
    name: Optional[Name1] = Field(
        None, description='The name of pipeline state (IN_PROGRESS).'
    )
    stage: Optional[PipelineStateInProgressStage] = Field(
        None, description='A stage of an in progress state of a pipeline.'
    )


class PipelineStateCompleted(PipelineState):
    name: Optional[Name4] = Field(
        None, description='The name of pipeline state (COMPLETED).'
    )
    result: Optional[PipelineStateCompletedResult] = Field(
        None, description='A result of a completed state of a pipeline.'
    )


class PipelineStateCompletedError(PipelineStateCompletedResult):
    name: Optional[Name5] = Field(None, description='The name of the result (ERROR)')
    error: Optional[PipelineError] = Field(
        None,
        description='An error result of a completed state of a Bitbucket Pipeline.',
    )


class PipelineStep(Object):
    uuid: Optional[str] = Field(None, description='The UUID identifying the step.')
    started_on: Optional[datetime] = Field(
        None,
        description="The timestamp when the step execution was started. This is not set when the step hasn't executed yet.",
    )
    completed_on: Optional[datetime] = Field(
        None,
        description='The timestamp when the step execution was completed. This is not set if the step is still in progress.',
    )
    state: Optional[PipelineStepState] = Field(
        None, description='The current state of the step'
    )
    image: Optional[PipelineImage] = Field(
        None, description='The Docker image used as the build container for the step.'
    )
    setup_commands: Optional[List[PipelineCommand]] = Field(
        None,
        description='The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.',
    )
    script_commands: Optional[List[PipelineCommand]] = Field(
        None,
        description='The list of build commands. These commands are executed in the build container.',
    )


class PipelineStepStateCompleted(PipelineStepState):
    name: Optional[Name13] = Field(
        None, description='The name of pipeline step state (COMPLETED).'
    )
    result: Optional[PipelineStepStateCompletedResult] = Field(
        None, description='A result of a completed state of a pipeline step.'
    )


class PipelineStepStateCompletedError(PipelineStepStateCompletedResult):
    name: Optional[Name14] = Field(None, description='The name of the result (ERROR)')
    error: Optional[PipelineStepError] = Field(
        None,
        description='An error result of a completed state of a Bitbucket Pipeline step.',
    )


class PaginatedPipelineSteps(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[PipelineStep]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class DeploymentStateCompleted(DeploymentState):
    name: Optional[Name22] = Field(
        None, description='The name of deployment state (COMPLETED).'
    )
    url: Optional[AnyUrl] = Field(None, description='Link to the deployment result.')
    deployer: Optional[Account] = Field(
        None,
        description='The Bitbucket account that was used to perform the deployment.',
    )
    status: Optional[DeploymentStateCompletedStatus] = Field(
        None, description='The status of the completed deployment.'
    )
    start_date: Optional[datetime] = Field(
        None, description='The timestamp when the deployment was started.'
    )
    completion_date: Optional[datetime] = Field(
        None, description='The timestamp when the deployment completed.'
    )


class PaginatedPullrequests(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Pullrequest]] = Field(None, min_items=0, unique_items=True)


class SearchCodeSearchResult(BaseModel):
    type: Optional[str] = None
    content_match_count: Optional[int] = None
    content_matches: Optional[List[SearchContentMatch]] = None
    path_matches: Optional[List[SearchSegment]] = None
    file: Optional[CommitFile] = None


class SearchResultPage(BaseModel):
    size: Optional[int] = None
    page: Optional[int] = None
    pagelen: Optional[int] = None
    query_substituted: Optional[bool] = None
    next: Optional[AnyUrl] = None
    previous: Optional[AnyUrl] = None
    values: Optional[List[SearchCodeSearchResult]] = None


class PipelinesConfig(Object):
    enabled: Optional[bool] = Field(
        None, description='Whether Pipelines is enabled for the repository.'
    )
    repository: Optional[Repository] = None


class Pipeline(Object):
    uuid: Optional[str] = Field(None, description='The UUID identifying the pipeline.')
    build_number: Optional[int] = Field(
        None, description='The build number of the pipeline.'
    )
    creator: Optional[Account] = Field(
        None, description='The Bitbucket account that was used to create the pipeline.'
    )
    repository: Optional[Repository] = None
    target: Optional[PipelineTarget] = Field(
        None, description='The target that the pipeline built.'
    )
    trigger: Optional[PipelineTrigger] = Field(
        None, description='The trigger used for the pipeline.'
    )
    state: Optional[PipelineState] = None
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the pipeline was created.'
    )
    completed_on: Optional[datetime] = Field(
        None,
        description='The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.',
    )
    build_seconds_used: Optional[int] = Field(
        None, description='The number of build seconds used by this pipeline.'
    )


class PipelineRefTarget(PipelineTarget):
    ref_type: Optional[RefType] = Field(
        None, description='The type of reference (branch/tag).'
    )
    ref_name: Optional[str] = Field(None, description='The name of the reference.')
    commit: Optional[Commit] = None
    selector: Optional[PipelineSelector] = None


class PipelineCommitTarget(PipelineTarget):
    commit: Optional[Commit] = None
    selector: Optional[PipelineSelector] = None


class PipelineScheduleExecutionExecuted(PipelineScheduleExecution):
    pipeline: Optional[Pipeline] = Field(
        None,
        description='The pipeline that was triggered by this execution of a schedule.',
    )


class PaginatedPipelines(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[Pipeline]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class DeploymentRelease(Object):
    uuid: Optional[str] = Field(None, description='The UUID identifying the release.')
    name: Optional[str] = Field(None, description='The name of the release.')
    url: Optional[AnyUrl] = Field(
        None, description='Link to the pipeline that produced the release.'
    )
    commit: Optional[Commit] = Field(
        None, description='The commit associated with this release.'
    )
    created_on: Optional[datetime] = Field(
        None, description='The timestamp when the release was created.'
    )


class Deployment(Object):
    uuid: Optional[str] = Field(
        None, description='The UUID identifying the deployment.'
    )
    state: Optional[DeploymentState] = None
    environment: Optional[DeploymentEnvironment] = Field(
        None, description='A deployment environment.'
    )
    release: Optional[DeploymentRelease] = Field(
        None, description='The release associated with this deployment.'
    )


class PaginatedDeployments(BaseModel):
    page: Optional[int] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    values: Optional[List[Deployment]] = Field(
        None, description='The values of the current page.', min_items=0
    )
    size: Optional[int] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    pagelen: Optional[int] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )


class IssueChange(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    links: Optional[Links] = None
    name: Optional[str] = None
    created_on: Optional[datetime] = None
    user: Optional[Account] = None
    issue: Optional[IssueModel] = None
    changes: Optional[Changes] = None
    message: Optional[Message] = None


class PaginatedBranches(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Branch]] = Field(None, min_items=0, unique_items=True)


class PullrequestComment(Comment):
    pullrequest: Optional[Pullrequest] = None


class DeployKey(Object):
    key: Optional[str] = Field(None, description='The deploy key value.')
    repository: Optional[Repository] = None
    comment: Optional[str] = Field(
        None, description='The comment parsed from the deploy key (if present)'
    )
    label: Optional[str] = Field(
        None, description='The user-defined label for the deploy key'
    )
    added_on: Optional[datetime] = None
    last_used: Optional[datetime] = None
    links: Optional[Links1] = None
    owner: Optional[Account] = None


class PaginatedIssues(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[IssueModel]] = Field(None, min_items=0, unique_items=True)


class Commit(BaseCommit):
    repository: Optional[Repository] = None
    participants: Optional[List[Participant]] = Field(None, min_items=0)


class Treeentry(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    path: Optional[str] = Field(None, description='The path in the repository')
    commit: Optional[Commit] = None


class PaginatedTreeentries(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Treeentry]] = Field(None, min_items=0, unique_items=True)


class RepositoryGroupPermission(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    links: Optional[Links4] = None
    permission: Optional[Permission] = None
    group: Optional[Group] = None
    repository: Optional[Repository] = None


class PullrequestEndpoint(BaseModel):
    class Config:
        extra = Extra.forbid

    repository: Optional[Repository] = None
    branch: Optional[Branch1] = Field(None, title='Pull Request Branch')
    commit: Optional[Commit1] = Field(None, title='Pull Request Commit')


class Pullrequest(Object):
    links: Optional[Links5] = None
    id: Optional[int] = Field(
        None,
        description="The pull request's unique ID. Note that pull request IDs are only unique within their associated repository.",
    )
    title: Optional[str] = Field(None, description='Title of the pull request.')
    rendered: Optional[Rendered] = Field(
        None,
        description='User provided pull request text, interpreted in a markup language and rendered in HTML',
        title='Rendered Pull Request Markup',
    )
    summary: Optional[Summary1] = None
    state: Optional[State1] = Field(
        None, description="The pull request's current status."
    )
    author: Optional[Account] = None
    source: Optional[PullrequestEndpoint] = None
    destination: Optional[PullrequestEndpoint] = None
    merge_commit: Optional[MergeCommit] = Field(None, title='Pull Request Commit')
    comment_count: Optional[conint(ge=0)] = Field(
        None, description='The number of comments for a specific pull request.'
    )
    task_count: Optional[conint(ge=0)] = Field(
        None, description='The number of open tasks for a specific pull request.'
    )
    close_source_branch: Optional[bool] = Field(
        None,
        description='A boolean flag indicating if merging the pull request closes the source branch.',
    )
    closed_by: Optional[Account] = None
    reason: Optional[str] = Field(
        None,
        description='Explains why a pull request was declined. This field is only applicable to pull requests in rejected state.',
    )
    created_on: Optional[datetime] = Field(
        None, description='The ISO8601 timestamp the request was created.'
    )
    updated_on: Optional[datetime] = Field(
        None, description='The ISO8601 timestamp the request was last updated.'
    )
    reviewers: Optional[List[Account]] = Field(
        None,
        description="The list of users that were added as reviewers on this pull request when it was created. For performance reasons, the API only includes this list on a pull request's `self` URL.",
    )
    participants: Optional[List[Participant]] = Field(
        None,
        description="        The list of users that are collaborating on this pull request.\n        Collaborators are user that:\n\n        * are added to the pull request as a reviewer (part of the reviewers\n          list)\n        * are not explicit reviewers, but have commented on the pull request\n        * are not explicit reviewers, but have approved the pull request\n\n        Each user is wrapped in an object that indicates the user's role and\n        whether they have approved the pull request. For performance reasons,\n        the API only returns this list when an API requests a pull request by\n        id.\n        ",
    )


class PaginatedRepositoryUserPermissions(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[RepositoryUserPermission]] = Field(
        None, min_items=0, unique_items=True
    )


class PaginatedLogEntries(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[IssueChange]] = Field(None, min_items=0)


class PaginatedPullrequestComments(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[PullrequestComment]] = Field(
        None, min_items=0, unique_items=True
    )


class PaginatedDeployKeys(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[DeployKey]] = Field(None, min_items=0, unique_items=True)


class IssueComment(Comment):
    issue: Optional[IssueModel] = None


class CommitComment(Comment):
    commit: Optional[Commit] = None


class RepositoryUserPermission(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    permission: Optional[Permission1] = None
    user: Optional[User] = None
    repository: Optional[Repository] = None
    links: Optional[Links11] = None


class Ref(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    links: Optional[Links12] = None
    name: Optional[str] = Field(None, description='The name of the ref.')
    target: Optional[Commit] = None


class Development2(BaseModel):
    class Config:
        extra = Extra.forbid

    branch: Optional[Branch] = None
    name: str = Field(
        ...,
        description='Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class Production2(BaseModel):
    class Config:
        extra = Extra.forbid

    branch: Optional[Branch] = None
    name: str = Field(
        ...,
        description='Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class EffectiveRepoBranchingModel(Object):
    branch_types: Optional[List[BranchType2]] = Field(
        None,
        description='The active branch types.',
        max_items=4,
        min_items=0,
        unique_items=True,
    )
    development: Optional[Development2] = None
    production: Optional[Production2] = None


class Repository(Object):
    links: Optional[Links14] = None
    uuid: Optional[str] = Field(
        None,
        description="The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.",
    )
    full_name: Optional[str] = Field(
        None,
        description='The concatenation of the repository owner\'s username and the slugified name, e.g. "evzijst/interruptingcow". This is the same string used in Bitbucket URLs.',
    )
    is_private: Optional[bool] = None
    parent: Optional[Repository] = None
    scm: Optional[Scm] = None
    owner: Optional[Account] = None
    name: Optional[str] = None
    description: Optional[str] = None
    created_on: Optional[datetime] = None
    updated_on: Optional[datetime] = None
    size: Optional[int] = None
    language: Optional[str] = None
    has_issues: Optional[bool] = None
    has_wiki: Optional[bool] = None
    fork_policy: Optional[ForkPolicy] = Field(
        None,
        description='\nControls the rules for forking this repository.\n\n* **allow_forks**: unrestricted forking\n* **no_public_forks**: restrict forking to private forks (forks cannot\n  be made public later)\n* **no_forks**: deny all forking\n',
    )
    project: Optional[Project] = None
    mainbranch: Optional[Branch] = None


class CommitFile(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    path: Optional[str] = Field(None, description='The path in the repository')
    commit: Optional[Commit] = None
    attributes: Optional[Attributes] = None
    escaped_path: Optional[str] = Field(
        None,
        description='The escaped version of the path as it appears in a diff. If the path does not require escaping this will be the same as path.',
    )


class Diffstat1(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    status: Optional[Status] = None
    lines_added: Optional[int] = None
    lines_removed: Optional[int] = None
    old: Optional[CommitFile] = None
    new: Optional[CommitFile] = None


class PaginatedDiffstats(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 500 with 5000 being the maximum allowed value.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Diffstat1]] = Field(None, min_items=0, unique_items=True)


class PaginatedRepositoryGroupPermissions(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[RepositoryGroupPermission]] = Field(
        None, min_items=0, unique_items=True
    )


class PaginatedRepositoryPermissions(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[RepositoryPermission]] = Field(
        None, min_items=0, unique_items=True
    )


class PaginatedCommitComments(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[CommitComment]] = Field(None, min_items=0, unique_items=True)


class PaginatedRepositories(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Repository]] = Field(None, min_items=0, unique_items=True)


class PaginatedRefs(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Ref]] = Field(None, min_items=0, unique_items=True)


class Development3(BaseModel):
    class Config:
        extra = Extra.forbid

    branch: Optional[Branch] = None
    name: str = Field(
        ...,
        description='Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class Production3(BaseModel):
    class Config:
        extra = Extra.forbid

    branch: Optional[Branch] = None
    name: str = Field(
        ...,
        description='Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.',
    )
    use_mainbranch: bool = Field(
        ...,
        description='Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).',
    )


class BranchingModel(Object):
    branch_types: Optional[List[BranchType3]] = Field(
        None,
        description='The active branch types.',
        max_items=4,
        min_items=0,
        unique_items=True,
    )
    development: Optional[Development3] = None
    production: Optional[Production3] = None


class PaginatedTags(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[Tag]] = Field(None, min_items=0, unique_items=True)


class PaginatedIssueComments(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[IssueComment]] = Field(None, min_items=0, unique_items=True)


class IssueModel(Object):
    class Config:
        extra = Extra.forbid

    links: Optional[Links21] = None
    id: Optional[int] = None
    repository: Optional[Repository] = None
    title: Optional[str] = None
    reporter: Optional[Account] = None
    assignee: Optional[Account] = None
    created_on: Optional[datetime] = None
    updated_on: Optional[datetime] = None
    edited_on: Optional[datetime] = None
    state: Optional[State4] = None
    kind: Optional[Kind5] = None
    priority: Optional[Priority1] = None
    milestone: Optional[Milestone1] = None
    version: Optional[VersionModel] = None
    component: Optional[ComponentModel] = None
    votes: Optional[int] = None
    content: Optional[Content2] = None


class PaginatedFiles(BaseModel):
    class Config:
        extra = Extra.forbid

    size: Optional[conint(ge=0)] = Field(
        None,
        description='Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.',
    )
    page: Optional[conint(ge=1)] = Field(
        None,
        description='Page number of the current results. This is an optional element that is not provided in all responses.',
    )
    pagelen: Optional[conint(ge=1)] = Field(
        None,
        description='Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.',
    )
    next: Optional[AnyUrl] = Field(
        None,
        description='Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    previous: Optional[AnyUrl] = Field(
        None,
        description='Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.',
    )
    values: Optional[List[CommitFile]] = Field(None, min_items=0, unique_items=True)


class RepositoryPermission(BaseModel):
    class Config:
        extra = Extra.allow

    type: str
    permission: Optional[Permission2] = None
    user: Optional[User] = None
    repository: Optional[Repository] = None


class Tag(Ref):
    message: Optional[str] = Field(
        None, description='The message associated with the tag, if available.'
    )
    date: Optional[datetime] = Field(
        None, description='The date that the tag was created, if available'
    )
    tagger: Optional[Author] = None


class Branch(Ref):
    merge_strategies: Optional[List[MergeStrategy2]] = Field(
        None,
        description='Available merge strategies for pull requests targeting this branch.',
    )
    default_merge_strategy: Optional[str] = Field(
        None,
        description='The default merge strategy for pull requests targeting this branch.',
    )


Comment.update_forward_refs()
BaseCommit.update_forward_refs()
PaginatedPullrequests.update_forward_refs()
SearchCodeSearchResult.update_forward_refs()
PipelinesConfig.update_forward_refs()
Pipeline.update_forward_refs()
PipelineRefTarget.update_forward_refs()
PipelineCommitTarget.update_forward_refs()
DeploymentRelease.update_forward_refs()
IssueChange.update_forward_refs()
PaginatedBranches.update_forward_refs()
PullrequestComment.update_forward_refs()
DeployKey.update_forward_refs()
PaginatedIssues.update_forward_refs()
Commit.update_forward_refs()
RepositoryGroupPermission.update_forward_refs()
PullrequestEndpoint.update_forward_refs()
PaginatedRepositoryUserPermissions.update_forward_refs()
IssueComment.update_forward_refs()
CommitComment.update_forward_refs()
RepositoryUserPermission.update_forward_refs()
Development2.update_forward_refs()
Production2.update_forward_refs()
Repository.update_forward_refs()
PaginatedRepositoryPermissions.update_forward_refs()
Development3.update_forward_refs()
Production3.update_forward_refs()
PaginatedTags.update_forward_refs()
